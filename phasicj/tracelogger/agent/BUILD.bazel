# Copyright 2019 David Johnston

# TODO(dwtj) : I want to be able to build the agent as a standalone dynamic
#  library deliverable, but its name needs to vary depending upon the target
#  platform. It seems that I can't use a select expression in the name of a
#  `cc_binary`, so I'm instead making multiple binaries. But this is misleading:
#  for example, a `dylib` file is built during a linux build, but it is really
#  a `so` file.
#
#  So, what's the right way to do this.
alias(
    name = "pjtracelogger",
    actual = select({
        "@bazel_tools//src/conditions:darwin": "libpjtracelogger.dylib",
        "@bazel_tools//src/conditions:linux_x86_64": "libpjtracelogger.so",
    }),
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "libpjtracelogger.dylib",
    copts = ["-std=c++17"],
    linkshared = True,
    linkstatic = True,
    visibility = ["//visibility:public"],
    deps = [":dynamic_agent"],
)

cc_binary(
    name = "libpjtracelogger.so",
    copts = ["-std=c++17"],
    linkshared = True,
    linkstatic = True,
    visibility = ["//visibility:public"],
    deps = [":dynamic_agent"],
)

cc_library(
    name = "agent",
    srcs = ["agent.cc"],
    hdrs = ["agent.h"],
    copts = ["-std=c++17"],
    deps = [
        "//phasicj/tracelogger:trace_logger_manager",
        "//third_party/jdk:jni_headers",
        "//third_party/jdk:jvmti_headers",
        "@boost//:log",
        "@gsl",
    ],
)

cc_library(
    name = "dynamic_agent",
    srcs = ["dynamic_agent.cc"],
    hdrs = ["dynamic_agent.h"],
    copts = ["-std=c++17"],
    deps = [
        ":agent",
        "@boost//:log",
    ],
    alwayslink = True,
)

# This is meant to be used to statically link the agent into a binary with the
# JVM itself.
cc_library(
    name = "static_agent",
    srcs = ["static_agent.cc"],
    hdrs = ["static_agent.h"],
    copts = ["-std=c++17"],
    linkstatic = True,
    visibility = ["//visibility:public"],
    deps = [
        ":agent",
        "@boost//:log",
    ],
)
